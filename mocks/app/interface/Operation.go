// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	big "math/big"
	_interface "rosen-bridge/tss/app/interface"

	common "github.com/binance-chain/tss-lib/common"

	mock "github.com/stretchr/testify/mock"

	models "rosen-bridge/tss/models"

	testing "testing"

	tss "github.com/binance-chain/tss-lib/tss"
)

// Operation is an autogenerated mock type for the Operation type
type Operation struct {
	mock.Mock
}

// GetClassName provides a mock function with given fields:
func (_m *Operation) GetClassName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GossipMessageHandler provides a mock function with given fields: rosenTss, outCh, endCh, signData
func (_m *Operation) GossipMessageHandler(rosenTss _interface.RosenTss, outCh chan tss.Message, endCh chan common.SignatureData, signData *big.Int) error {
	ret := _m.Called(rosenTss, outCh, endCh, signData)

	var r0 error
	if rf, ok := ret.Get(0).(func(_interface.RosenTss, chan tss.Message, chan common.SignatureData, *big.Int) error); ok {
		r0 = rf(rosenTss, outCh, endCh, signData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Init provides a mock function with given fields: _a0, _a1
func (_m *Operation) Init(_a0 _interface.RosenTss, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(_interface.RosenTss, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Loop provides a mock function with given fields: _a0, _a1
func (_m *Operation) Loop(_a0 _interface.RosenTss, _a1 chan models.Message) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(_interface.RosenTss, chan models.Message) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PartyIdMessageHandler provides a mock function with given fields: rosenTss, gossipMessage, signData
func (_m *Operation) PartyIdMessageHandler(rosenTss _interface.RosenTss, gossipMessage models.GossipMessage, signData *big.Int) error {
	ret := _m.Called(rosenTss, gossipMessage, signData)

	var r0 error
	if rf, ok := ret.Get(0).(func(_interface.RosenTss, models.GossipMessage, *big.Int) error); ok {
		r0 = rf(rosenTss, gossipMessage, signData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PartyUpdate provides a mock function with given fields: _a0
func (_m *Operation) PartyUpdate(_a0 models.PartyMessage) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.PartyMessage) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Setup provides a mock function with given fields: _a0, _a1
func (_m *Operation) Setup(_a0 _interface.RosenTss, _a1 *big.Int) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(_interface.RosenTss, *big.Int) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewOperation creates a new instance of Operation. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewOperation(t testing.TB) *Operation {
	mock := &Operation{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

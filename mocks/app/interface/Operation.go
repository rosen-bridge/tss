// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	_interface "rosen-bridge/tss/app/interface"

	mock "github.com/stretchr/testify/mock"

	models "rosen-bridge/tss/models"
)

// Operation is an autogenerated mock type for the Operation type
type Operation struct {
	mock.Mock
}

// GetClassName provides a mock function with given fields:
func (_m *Operation) GetClassName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Init provides a mock function with given fields: _a0, _a1
func (_m *Operation) Init(_a0 _interface.RosenTss, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(_interface.RosenTss, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Loop provides a mock function with given fields: _a0, _a1
func (_m *Operation) Loop(_a0 _interface.RosenTss, _a1 chan models.Message) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(_interface.RosenTss, chan models.Message) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewOperation interface {
	mock.TestingT
	Cleanup(func())
}

// NewOperation creates a new instance of Operation. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOperation(t mockConstructorTestingTNewOperation) *Operation {
	mock := &Operation{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

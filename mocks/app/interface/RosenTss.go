// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	models "rosen-bridge/tss/models"

	mock "github.com/stretchr/testify/mock"

	network "rosen-bridge/tss/network"

	storage "rosen-bridge/tss/storage"

	testing "testing"
)

// RosenTss is an autogenerated mock type for the RosenTss type
type RosenTss struct {
	mock.Mock
}

// GetConnection provides a mock function with given fields:
func (_m *RosenTss) GetConnection() network.Connection {
	ret := _m.Called()

	var r0 network.Connection
	if rf, ok := ret.Get(0).(func() network.Connection); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(network.Connection)
		}
	}

	return r0
}

// GetMetaData provides a mock function with given fields:
func (_m *RosenTss) GetMetaData() models.MetaData {
	ret := _m.Called()

	var r0 models.MetaData
	if rf, ok := ret.Get(0).(func() models.MetaData); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(models.MetaData)
	}

	return r0
}

// GetPeerHome provides a mock function with given fields:
func (_m *RosenTss) GetPeerHome() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetStorage provides a mock function with given fields:
func (_m *RosenTss) GetStorage() storage.Storage {
	ret := _m.Called()

	var r0 storage.Storage
	if rf, ok := ret.Get(0).(func() storage.Storage); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storage.Storage)
		}
	}

	return r0
}

// MessageHandler provides a mock function with given fields: _a0
func (_m *RosenTss) MessageHandler(_a0 models.Message) {
	_m.Called(_a0)
}

// NewMessage provides a mock function with given fields: receiverId, senderId, message, messageId, name
func (_m *RosenTss) NewMessage(receiverId string, senderId string, message string, messageId string, name string) models.GossipMessage {
	ret := _m.Called(receiverId, senderId, message, messageId, name)

	var r0 models.GossipMessage
	if rf, ok := ret.Get(0).(func(string, string, string, string, string) models.GossipMessage); ok {
		r0 = rf(receiverId, senderId, message, messageId, name)
	} else {
		r0 = ret.Get(0).(models.GossipMessage)
	}

	return r0
}

// SetMetaData provides a mock function with given fields:
func (_m *RosenTss) SetMetaData() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetPeerHome provides a mock function with given fields: _a0
func (_m *RosenTss) SetPeerHome(_a0 string) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StartNewSign provides a mock function with given fields: _a0
func (_m *RosenTss) StartNewSign(_a0 models.SignMessage) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.SignMessage) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRosenTss creates a new instance of RosenTss. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewRosenTss(t testing.TB) *RosenTss {
	mock := &RosenTss{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	models "rosen-bridge/tss/models"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// Connection is an autogenerated mock type for the Connection type
type Connection struct {
	mock.Mock
}

// CallBack provides a mock function with given fields: _a0, _a1
func (_m *Connection) CallBack(_a0 string, _a1 models.SignData) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, models.SignData) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Publish provides a mock function with given fields: message
func (_m *Connection) Publish(message models.GossipMessage) error {
	ret := _m.Called(message)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.GossipMessage) error); ok {
		r0 = rf(message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Subscribe provides a mock function with given fields: port
func (_m *Connection) Subscribe(port string) error {
	ret := _m.Called(port)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(port)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Unsubscribe provides a mock function with given fields:
func (_m *Connection) Unsubscribe() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewConnection creates a new instance of Connection. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewConnection(t testing.TB) *Connection {
	mock := &Connection{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

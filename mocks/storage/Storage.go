// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	keygen "github.com/binance-chain/tss-lib/eddsa/keygen"
	mock "github.com/stretchr/testify/mock"

	testing "testing"

	tss "github.com/binance-chain/tss-lib/tss"
)

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

// LoadEDDSAKeygen provides a mock function with given fields: peerHome
func (_m *Storage) LoadEDDSAKeygen(peerHome string) (keygen.LocalPartySaveData, *tss.PartyID, error) {
	ret := _m.Called(peerHome)

	var r0 keygen.LocalPartySaveData
	if rf, ok := ret.Get(0).(func(string) keygen.LocalPartySaveData); ok {
		r0 = rf(peerHome)
	} else {
		r0 = ret.Get(0).(keygen.LocalPartySaveData)
	}

	var r1 *tss.PartyID
	if rf, ok := ret.Get(1).(func(string) *tss.PartyID); ok {
		r1 = rf(peerHome)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*tss.PartyID)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(peerHome)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MakefilePath provides a mock function with given fields: peerHome, topicName, fileFormat, protocol
func (_m *Storage) MakefilePath(peerHome string, topicName string, fileFormat string, protocol string) {
	_m.Called(peerHome, topicName, fileFormat, protocol)
}

// WriteData provides a mock function with given fields: data, peerHome, topicName, fileFormat, protocol
func (_m *Storage) WriteData(data interface{}, peerHome string, topicName string, fileFormat string, protocol string) error {
	ret := _m.Called(data, peerHome, topicName, fileFormat, protocol)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, string, string, string, string) error); ok {
		r0 = rf(data, peerHome, topicName, fileFormat, protocol)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewStorage creates a new instance of Storage. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewStorage(t testing.TB) *Storage {
	mock := &Storage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
